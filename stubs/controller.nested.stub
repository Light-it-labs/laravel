<?php

declare(strict_types=1);

namespace {{ namespace }};

use Illuminate\Contracts\View\View as ViewContract;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\View;
use {{ namespacedModel }};
use {{ namespacedParentModel }};

class {{ class }}
{
    public function index({{ parentModel }} ${{ parentModelVariable }}): ViewContract
    {
        return View::make('{{ parentModelVariablePlural }}.{{ modelVariablePlural }}.index', [
            '{{ modelVariablePlural }}' => ${{ parentModelVariable }}->{{ modelVariablePlural }}()->paginate()
        ]);
    }

    public function create({{ parentModel }} ${{ parentModelVariable }}): ViewContract
    {
        return View::make('{{ parentModelVariablePlural }}.{{ modelVariablePlural }}.create', [
            '{{ parentModelVariable }}' => ${{ parentModelVariable }}
        ]);
    }

    public function store(FormRequest $request, {{ parentModel }} ${{ parentModelVariable }}): JsonResponse
    {
        ${{ modelVariable }} = ${{ parentModelVariable }}->{{ modelVariablePlural }}()->save($request->validated());

        return responder()
            ->success(${{ modelVariable }})
            ->respond(JsonResponse::HTTP_CREATED);
    }

    public function show({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }}): ViewContract
    {
        return View::make('{{ modelVariablePlural }}.show', [
            '{{ parentModelVariable }}' => ${{ parentModelVariable }},
            '{{ modelVariable }}' => ${{ modelVariable }}
        ]);
    }

    public function edit({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }}): ViewContract
    {
        return View::make('{{ modelVariablePlural }}.edit', [
            '{{ parentModelVariable }}' => ${{ parentModelVariable }},
            '{{ modelVariable }}' => ${{ modelVariable }}
        ]);
    }

    public function update(FormRequest $request, {{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }}): JsonResponse
    {
        ${{ modelVariable }}->update($request->validated());

        return responder()
            ->success(${{ modelVariable }})
            ->respond();
    }

    public function destroy({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }}): JsonResponse
    {
        ${{ modelVariable }}->delete();

        return responder()
            ->success()
            ->respond(JsonResponse::HTTP_NO_CONTENT);
    }
}
